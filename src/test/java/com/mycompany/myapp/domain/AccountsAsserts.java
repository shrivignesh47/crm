package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AccountsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAllPropertiesEquals(Accounts expected, Accounts actual) {
        assertAccountsAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAllUpdatablePropertiesEquals(Accounts expected, Accounts actual) {
        assertAccountsUpdatableFieldsEquals(expected, actual);
        assertAccountsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsAutoGeneratedPropertiesEquals(Accounts expected, Accounts actual) {
        assertThat(expected)
            .as("Verify Accounts auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsUpdatableFieldsEquals(Accounts expected, Accounts actual) {
        assertThat(expected)
            .as("Verify Accounts relevant properties")
            .satisfies(e -> assertThat(e.getAccount_owner()).as("check account_owner").isEqualTo(actual.getAccount_owner()))
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getAccount_site()).as("check account_site").isEqualTo(actual.getAccount_site()))
            .satisfies(e -> assertThat(e.getFax()).as("check fax").isEqualTo(actual.getFax()))
            .satisfies(e -> assertThat(e.getWebsite()).as("check website").isEqualTo(actual.getWebsite()))
            .satisfies(e -> assertThat(e.getAccount_number()).as("check account_number").isEqualTo(actual.getAccount_number()))
            .satisfies(e -> assertThat(e.getTicket_Symbol()).as("check ticket_Symbol").isEqualTo(actual.getTicket_Symbol()))
            .satisfies(e -> assertThat(e.getAccount_type()).as("check account_type").isEqualTo(actual.getAccount_type()))
            .satisfies(e -> assertThat(e.getOwnership()).as("check ownership").isEqualTo(actual.getOwnership()))
            .satisfies(e -> assertThat(e.getBilling_street()).as("check billing_street").isEqualTo(actual.getBilling_street()))
            .satisfies(e -> assertThat(e.getBilling_city()).as("check billing_city").isEqualTo(actual.getBilling_city()))
            .satisfies(e -> assertThat(e.getBilling_state()).as("check billing_state").isEqualTo(actual.getBilling_state()))
            .satisfies(e -> assertThat(e.getBilling_code()).as("check billing_code").isEqualTo(actual.getBilling_code()))
            .satisfies(e -> assertThat(e.getBilling_country()).as("check billing_country").isEqualTo(actual.getBilling_country()))
            .satisfies(e -> assertThat(e.getShipping_street()).as("check shipping_street").isEqualTo(actual.getShipping_street()))
            .satisfies(e -> assertThat(e.getShipping_city()).as("check shipping_city").isEqualTo(actual.getShipping_city()))
            .satisfies(e -> assertThat(e.getShipping_state()).as("check shipping_state").isEqualTo(actual.getShipping_state()))
            .satisfies(e -> assertThat(e.getShipping_code()).as("check shipping_code").isEqualTo(actual.getShipping_code()))
            .satisfies(e -> assertThat(e.getShipping_country()).as("check shipping_country").isEqualTo(actual.getShipping_country()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getEmployees()).as("check employees").isEqualTo(actual.getEmployees()))
            .satisfies(e -> assertThat(e.getSic_code()).as("check sic_code").isEqualTo(actual.getSic_code()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountsUpdatableRelationshipsEquals(Accounts expected, Accounts actual) {}
}
